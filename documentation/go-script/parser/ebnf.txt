Script = TopDec* .
TopDec = Include | FuncDec .
Include = "include" (<string> ("," <string>)*) .
FuncDec = <ident> "(" ((Parameter ("," Parameter)*) | "void")? ")" (";" | ("{" FuncBody "}")) .
Parameter = <ident> .
FuncBody = Statements .
Statements = Statement* .
Statement = IfStmt | Break | ReturnStmt | WhileStmt | ForStmt | ForRange | Try | ("{" Statements "}") | Expression | ";" .
IfStmt = "if" Expression Statement ("else" Statement)? .
Expression = Assignment .
Assignment = Logic (":"? "=" Equality)? .
Logic = Equality ((("&" "&") | ("|" "|")) Logic)? .
Equality = Comparison ((("!" "=") | ("=" "=")) Equality)? .
Comparison = Addition (((">" "=") | ">" | ("<" "=") | "<") Comparison)? .
Addition = Multiplication (("+" | "-") Addition)? .
Multiplication = Unary (("*" | "/" | "%") Multiplication)? .
Unary = (("!" | "-") Unary) | Primary .
Primary = (<number> | <int> | KeyValue | <string> | CallFunc | "null" | "nil" | "true" | "false" | (<ident> ("[" Expression "]")+?) | ("(" Expression ")")) (<period> Primary)? .
KeyValue = <string> ":" Expression .
CallFunc = <ident> "(" (Expression ("," Expression)*)? "..."? ")" .
Break = "break" .
ReturnStmt = "return" Expression? .
WhileStmt = "while" Expression Statement .
ForStmt = "for" Expression? ";" Expression? ";" Expression? Statement .
ForRange = "for" <ident> "," <ident> ":"? "=" "range" Expression Statement .
Try = "try" ("(" (Expression (";" Expression)*) ")")? Statement ("catch" "(" <ident> ")" Statement)? ("finally" Statement)? .